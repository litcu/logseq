# Windows 和 Linux-x64 版本的自动构建和 E2E 测试

name: Build-Desktop-Release

on:
  workflow_dispatch:
    inputs:
      build-target:
        description: 'Build Target (Release Type)'
        type: choice
        required: true
        options:
          - beta
          - nightly
          - non-release
        default: "non-release"
      git-ref:
        description: "Release Git Ref (Which branch or tag to build?)"
        required: true
        default: "feat/db"
      is-draft:
        description: 'Draft Release? (Beta only, Nightly will always be a non-draft)'
        type: boolean
        required: true
        default: true
      is-pre-release:
        description: 'Pre Release? (labeled as "PreRelease")'
        type: boolean
        required: true
        default: true
  schedule:
    - cron: '0 2 * * MON-FRI'  # 每周一至周五 02:00 UTC 自动触发

env:
  CLOJURE_VERSION: '1.11.1.1413'
  NODE_VERSION: '20'
  JAVA_VERSION: '11'

jobs:
  compile-cljs:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          ref: feat/db

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Java JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup clojure
        uses: DeLaGuardo/setup-clojure@10.1
        with:
          cli: ${{ env.CLOJURE_VERSION }}

      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./scripts/get-pkg-version.js "${{ github.event.inputs.build-target }}")
          echo "version=$pkgver" >> $GITHUB_OUTPUT

      - name: Compile CLJS
        run: yarn install && gulp build && yarn cljs:release-electron
        env:
          LOGSEQ_SENTRY_DSN: ${{ secrets.LOGSEQ_SENTRY_DSN }}
          LOGSEQ_POSTHOG_TOKEN: ${{ secrets.LOGSEQ_POSTHOG_TOKEN }}

      - name: Save VERSION file
        run: echo "${{ steps.ref.outputs.version }}" > ./VERSION
        working-directory: ./static

      - name: Cache Static File
        uses: actions/upload-artifact@v3
        with:
          name: static
          path: static

  e2e-test:
    name: E2E Test
    runs-on: ubuntu-latest
    needs: [ compile-cljs ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download The Static Asset
        uses: actions/download-artifact@v3
        with:
          name: static
          path: static

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install Fluxbox
        run: sudo apt-get update && sudo apt-get install -y fluxbox

      - name: Run XVFB
        run: Xvfb :1 -screen 0 1024x768x24 >/dev/null 2>&1 &

      - name: Start Fluxbox
        run: DISPLAY=:1.0 fluxbox >/dev/null 2>&1 &

      - name: Run Playwright test
        run: DISPLAY=:1.0 npx playwright test --reporter github
        env:
          LOGSEQ_CI: true
          RELEASE: true

  build-linux-x64:
    runs-on: ubuntu-20.04
    needs: [ compile-cljs ]
    steps:
      - name: Download The Static Asset
        uses: actions/download-artifact@v3
        with:
          name: static
          path: static

      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(cat ./static/VERSION)
          echo "version=$pkgver" >> $GITHUB_OUTPUT

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build/Release Electron App
        run: yarn install && yarn electron:make
        working-directory: ./static

      - name: Save artifacts
        run: |
          mkdir -p builds
          cp static/VERSION ./builds/VERSION
          mv static/out/make/*-*.AppImage ./builds/Linux-x64-${{ steps.ref.outputs.version }}.AppImage
          mv static/out/make/zip/linux/x64/*-linux-x64-*.zip ./builds/Linux-x64-${{ steps.ref.outputs.version }}.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux-x64-builds
          path: builds

  build-windows:
    runs-on: windows-latest
    needs: [ compile-cljs ]
    steps:
      - name: Download The Static Asset
        uses: actions/download-artifact@v3
        with:
          name: static
          path: static

      - name: Retrieve tag version
        id: ref
        run: echo "version=$(cat ./static/VERSION)" >> $env:GITHUB_OUTPUT

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build/Release Electron app
        run: yarn install && yarn electron:make
        working-directory: ./static

      - name: Save artifacts
        run: |
          mkdir builds
          mv static/out/make/squirrel.windows/x64/*.exe builds/Windows-x64-${{ steps.ref.outputs.version }}.exe
          mv static/out/make/zip/win32/x64/*.zip builds/Windows-x64-${{ steps.ref.outputs.version }}.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-builds
          path: builds

  release:
    needs: [ build-linux-x64, build-windows ]
    runs-on: ubuntu-20.04
    steps:
      - name: Download Linux x64 Artifacts
        uses: actions/download-artifact@v3
        with:
          name: linux-x64-builds
          path: ./

      - name: Download Windows Artifacts
        uses: actions/download-artifact@v3
        with:
          name: windows-builds
          path: ./

      - name: Generate SHA256 checksums
        run: sha256sum * > SHA256SUMS.txt

      - name: Create Release Draft
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.ref.outputs.version }}
          name: "Release ${{ steps.ref.outputs.version }}"
          body: "Automated build from feat/db branch."
          draft: ${{ github.event.inputs.is-draft }}
          prerelease: ${{ github.event.inputs.is-pre-release }}
          files: |
            ./SHA256SUMS.txt
            ./*.zip
            ./*.exe
            ./*.AppImage
